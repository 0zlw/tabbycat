# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-28 16:59
from __future__ import unicode_literals

from django.db import migrations

TRUE_CONSTANTS = ("True", "true", "TRUE", "1", "YES", "Yes", "yes")

PARTICIPANT_SUBMISSION_OPTIONS = [
    ("participant_ballots", "public_ballots", "public_ballots_randomised"),
    ("participant_feedback", "public_feedback", "public_feedback_randomised"),
]


def convert_participant_submission_options(apps, schema_editor):
    Tournament = apps.get_model("tournaments", "Tournament")  # noqa: N806
    TournamentPreferenceModel = apps.get_model("options", "TournamentPreferenceModel")  # noqa: N806

    for t_id in Tournament.objects.values_list('id', flat=True):

        for new_pref_name, old_normal_pref_name, old_randomised_pref_name in PARTICIPANT_SUBMISSION_OPTIONS:

            if TournamentPreferenceModel.objects.filter(instance_id=t_id, section="data_entry",
                    name=new_pref_name).exists():
                continue

            normal_pref = TournamentPreferenceModel.objects.filter(instance_id=t_id,
                    section="data_entry", name=old_normal_pref_name).first()
            randomised_pref = TournamentPreferenceModel.objects.filter(instance_id=t_id,
                    section="data_entry", name=old_randomised_pref_name).first()

            if normal_pref is None and randomised_pref is None:
                continue

            if getattr(normal_pref, 'raw_value', "False") in TRUE_CONSTANTS:
                new_value = "public"
            elif getattr(randomised_pref, 'raw_value', "False") in TRUE_CONSTANTS:
                new_value = "private-urls"
            else:
                new_value = "off"

            TournamentPreferenceModel.objects.create(instance_id=t_id, section="data_entry",
                    name=new_pref_name, raw_value=new_value)

            if normal_pref is not None:
                normal_pref.delete()
            if randomised_pref is not None:
                randomised_pref.delete()


def convert_participant_submission_options_reverse(apps, schema_editor):
    Tournament = apps.get_model("tournaments", "Tournament")  # noqa: N806
    TournamentPreferenceModel = apps.get_model("options", "TournamentPreferenceModel")  # noqa: N806

    for t_id in Tournament.objects.values_list('id', flat=True):

        for new_pref_name, old_normal_pref_name, old_randomised_pref_name in PARTICIPANT_SUBMISSION_OPTIONS:

            new_pref = TournamentPreferenceModel.objects.filter(instance_id=t_id,
                    section="data_entry", name=new_pref_name).first()
            if new_pref is None:
                continue

            if new_pref.raw_value == "off":
                normal = False
                randomised = False
            elif new_pref.raw_value == "public":
                normal = True
                randomised = False
            elif new_pref.raw_value == "private-urls":
                normal = False
                randomised = True
            else:
                continue

            if not TournamentPreferenceModel.objects.filter(instance_id=t_id,
                    section="data_entry", name=old_normal_pref_name).exists():
                TournamentPreferenceModel.objects.create(instance_id=t_id,
                        section="data_entry", name=old_normal_pref_name, raw_value=str(normal))

            if not TournamentPreferenceModel.objects.filter(instance_id=t_id,
                    section="data_entry", name=old_randomised_pref_name).exists():
                TournamentPreferenceModel.objects.create(instance_id=t_id,
                        section="data_entry", name=old_randomised_pref_name, raw_value=str(randomised))

            if new_pref is not None:
                new_pref.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('options', '0008_rename_position_names_to_side_names'),
    ]

    operations = [
        migrations.RunPython(convert_participant_submission_options,
                reverse_code=convert_participant_submission_options_reverse,
                elidable=True),
    ]
