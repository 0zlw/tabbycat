# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-01-03 19:27
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('participants', '0001_initial'),
        ('availability', '0002_checkin_person'),
    ]

    operations = [
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name or suffix')),
                ('seq', models.IntegerField(blank=True, help_text='The order in which divisions are displayed', null=True)),
                ('time_slot', models.TimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['tournament', 'seq'],
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq', models.IntegerField(help_text='A number that determines the order of the round, IE 1 for the initial round')),
                ('name', models.CharField(help_text='e.g. "Round 1"', max_length=40)),
                ('abbreviation', models.CharField(help_text='e.g. "R1"', max_length=10)),
                ('draw_type', models.CharField(choices=[('R', 'Random'), ('M', 'Manual'), ('D', 'Round-robin'), ('P', 'Power-paired'), ('F', 'First elimination'), ('B', 'Subsequent elimination')], help_text='Which draw technique to use', max_length=1)),
                ('stage', models.CharField(choices=[('P', 'Preliminary'), ('E', 'Elimination')], default='P', help_text='Preliminary = inrounds, elimination = outrounds', max_length=1)),
                ('draw_status', models.CharField(choices=[('N', 'None'), ('D', 'Draft'), ('C', 'Confirmed'), ('R', 'Released')], default='N', max_length=1)),
                ('venue_status', models.CharField(choices=[('N', 'None'), ('D', 'Draft'), ('C', 'Confirmed'), ('R', 'Released')], default='N', max_length=1)),
                ('adjudicator_status', models.CharField(choices=[('N', 'None'), ('D', 'Draft'), ('C', 'Confirmed'), ('R', 'Released')], default='N', max_length=1)),
                ('feedback_weight', models.FloatField(default=0)),
                ('silent', models.BooleanField(default=False)),
                ('motions_released', models.BooleanField(default=False)),
                ('starts_at', models.TimeField(blank=True, null=True)),
                ('active_adjudicators', models.ManyToManyField(through='availability.ActiveAdjudicator', to='participants.Adjudicator')),
                ('active_teams', models.ManyToManyField(through='availability.ActiveTeam', to='participants.Team')),
            ],
            options={
                'ordering': ['tournament', 'seq'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name used on the homepage', max_length=100)),
                ('short_name', models.CharField(blank=True, default='', help_text='The name used in the menu', max_length=25, null=True)),
                ('seq', models.IntegerField(blank=True, help_text='The order in which tournaments are displayed', null=True)),
                ('slug', models.SlugField(help_text='The sub-URL of the tournament; cannot have spaces', unique=True)),
                ('welcome_msg', models.TextField(blank=True, default='', help_text='Text/html entered here shows on the homepage', null=True)),
                ('release_all', models.BooleanField(default=False, help_text='This releases all results; do so only after the tournament is finished')),
                ('active', models.BooleanField(default=True)),
                ('current_round', models.ForeignKey(blank=True, help_text='Must be set for the tournament to start! (Set after rounds are inputted)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tournament_', to='tournaments.Round')),
            ],
            options={
                'ordering': ['seq'],
            },
        ),
    ]
