# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-11-19 13:12
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import tournaments.models


class Migration(migrations.Migration):

    dependencies = [
        ('tournaments', '0017_auto_20160914_2254'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='round',
            options={'ordering': ['tournament', 'seq'], 'verbose_name': 'round', 'verbose_name_plural': 'rounds'},
        ),
        migrations.AlterModelOptions(
            name='tournament',
            options={'ordering': ['seq'], 'verbose_name': 'tournament', 'verbose_name_plural': 'tournaments'},
        ),
        migrations.AlterField(
            model_name='round',
            name='abbreviation',
            field=models.CharField(help_text='e.g. "R1"', max_length=10, verbose_name='abbreviation'),
        ),
        migrations.AlterField(
            model_name='round',
            name='break_category',
            field=models.ForeignKey(blank=True, help_text='If elimination round, which break category', null=True, on_delete=django.db.models.deletion.CASCADE, to='breakqual.BreakCategory', verbose_name='break category'),
        ),
        migrations.AlterField(
            model_name='round',
            name='draw_status',
            field=models.CharField(choices=[('N', 'None'), ('D', 'Draft'), ('C', 'Confirmed'), ('R', 'Released')], default='N', help_text="The status of this round's draw", max_length=1, verbose_name='draw status'),
        ),
        migrations.AlterField(
            model_name='round',
            name='draw_type',
            field=models.CharField(choices=[('R', 'Random'), ('M', 'Manual'), ('D', 'Round-robin'), ('P', 'Power-paired'), ('F', 'First elimination'), ('B', 'Subsequent elimination')], help_text='Which draw method to use', max_length=1, verbose_name='draw type'),
        ),
        migrations.AlterField(
            model_name='round',
            name='feedback_weight',
            field=models.FloatField(default=0, help_text="The extent to which each adjudicator's overall score depends on feedback vs their test score. At 0, it is 100% drawn from their test score, at 1 it is 100% drawn from feedback.", verbose_name='feedback weight'),
        ),
        migrations.AlterField(
            model_name='round',
            name='motions_released',
            field=models.BooleanField(default=False, help_text='Whether motions will appear on the public website, assuming that feature is turned on', verbose_name='motions released'),
        ),
        migrations.AlterField(
            model_name='round',
            name='name',
            field=models.CharField(help_text='e.g. "Round 1"', max_length=40, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='round',
            name='seq',
            field=models.IntegerField(help_text='A number that determines the order of the round, should count consecutively from 1 for the first round', verbose_name='sequence number'),
        ),
        migrations.AlterField(
            model_name='round',
            name='silent',
            field=models.BooleanField(default=False, help_text='If marked silent, information about this round (such as its results) will not be shown publicly.', verbose_name='silent'),
        ),
        migrations.AlterField(
            model_name='round',
            name='stage',
            field=models.CharField(choices=[('P', 'Preliminary'), ('E', 'Elimination')], default='P', help_text='Preliminary = inrounds, elimination = outrounds', max_length=1, verbose_name='stage'),
        ),
        migrations.AlterField(
            model_name='round',
            name='starts_at',
            field=models.TimeField(blank=True, null=True, verbose_name='starts at'),
        ),
        migrations.AlterField(
            model_name='round',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Tournament', verbose_name='tournament'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='active',
            field=models.BooleanField(default=True, verbose_name='active'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='current_round',
            field=models.ForeignKey(blank=True, help_text='Must be set for the tournament to start! (Set after rounds are inputted)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tournament_', to='tournaments.Round', verbose_name='current round'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='emoji',
            field=models.CharField(blank=True, choices=[('☕', '☕'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛵', '⛵'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⛏', '⛏'), ('😁', '😁'), ('😂', '😂'), ('😄', '😄'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😇', '😇'), ('😐', '😐'), ('😏', '😏'), ('😥', '😥'), ('😜', '😜'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😞', '😞'), ('😭', '😭'), ('😰', '😰'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('👿', '👿'), ('👩', '👩'), ('👴', '👴'), ('👵', '👵'), ('👶', '👶'), ('👮', '👮'), ('👷', '👷'), ('👸', '👸'), ('💂', '💂'), ('🎅', '🎅'), ('👼', '👼'), ('👰', '👰'), ('🙅', '🙅'), ('🙆', '🙆'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('💃', '💃'), ('💑', '💑'), ('👪', '👪'), ('👫', '👫'), ('👬', '👬'), ('👭', '👭'), ('💪', '💪'), ('👆', '👆'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👐', '👐'), ('💅', '💅'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💘', '💘'), ('💔', '💔'), ('💖', '💖'), ('💌', '💌'), ('💧', '💧'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('👓', '👓'), ('👔', '👔'), ('👙', '👙'), ('👜', '👜'), ('👟', '👟'), ('👠', '👠'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', ''), ('🙈', ''), ('🙉', ''), ('🙊', ''), ('🐶', '🐶'), ('🐩', ''), ('🐯', '🐯'), ('🐴', '🐴'), ('🐮', '🐮'), ('🐷', '🐷'), ('🐑', '🐑'), ('🐭', '🐭'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐔', '🐔'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐳', '🐳'), ('🐟', '🐟'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐝', '🐝'), ('🌸', '🌸'), ('🌹', '🌹'), ('🌻', '🌻'), ('🌷', '🌷'), ('🌱', ''), ('🌵', '🌵'), ('🍀', ''), ('🍁', '🍁'), ('🍇', '🍇'), ('🍉', '🍉'), ('🍊', '🍊'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍅', '🍅'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🍞', '🍞'), ('🍔', '🍔'), ('🍕', '🍕'), ('🍙', ''), ('🍨', '🍨'), ('🍩', '🍩'), ('🍪', '🍪'), ('🍰', '🍰'), ('🍭', '🍭'), ('🍼', '🍼'), ('🍷', '🍷'), ('🍸', '🍸'), ('🍹', '🍹'), ('🍺', '🍺'), ('🍴', '🍴'), ('🌋', '🌋'), ('🏠', '🏠'), ('🏢', '🏢'), ('🏩', '🏩'), ('🌊', '🌊'), ('🎨', '🎨'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚝', '🚝'), ('🚍', '🚍'), ('🚔', '🚔'), ('🚘', '🚘'), ('🚲', '🚲'), ('🚨', '🚨'), ('🚣', '🚣'), ('🚁', '🚁'), ('🚀', '🚀'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚷', '🚷'), ('🚻', '🚻'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('⏳', '⏳'), ('⏰', '⏰'), ('🌑', '🌑'), ('🌕', '🌕'), ('🌗', '🌗'), ('🌞', '🌞'), ('🌈', '🌈'), ('🌂', '🌂'), ('🌟', '🌟'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎀', '🎀'), ('🏀', '🏀'), ('🏈', '🏈'), ('🎾', '🎾'), ('🎱', '🎱'), ('🎮', '🎮'), ('🎲', '🎲'), ('📣', '📣'), ('📯', ''), ('🔔', '🔔'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📞', '📞'), ('🔋', '🔋'), ('🔌', '🔌'), ('💾', '💾'), ('💿', '💿'), ('🎬', '🎬'), ('📷', '📷'), ('🔍', '🔍'), ('🔭', '🔭'), ('💡', '💡'), ('📕', '📕'), ('📰', '📰'), ('💰', '💰'), ('💸', '💸'), ('📦', ''), ('📫', '📫'), ('💼', '💼'), ('📅', '📅'), ('📏', '📏'), ('📐', '📐'), ('🔑', '🔑'), ('🔩', '🔩'), ('💊', ''), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', ''), ('🔮', '🔮'), ('❌', '❌'), ('❓', '❓'), ('🔞', '🔞'), ('🆒', '🆒'), ('🆗', '🆗'), ('🆘', '🆘'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😴', '😴'), ('😛', '😛'), ('😧', '😧'), ('😬', '😬'), ('🕵', '🕵'), ('🖕', '🖕'), ('🖖', '🖖'), ('👁', '👁'), ('🕶', '🕶'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🌶', '🌶'), ('🏛', '🏛'), ('🛢', '🛢'), ('🛎', '🛎'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌤', '🌤'), ('🌧', '🌧'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌫', '🌫'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎗', '🎗'), ('🎞', '🎞'), ('🏷', '🏷'), ('🏅', '🏅'), ('🕹', '🕹'), ('🎙', '🎙'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖲', '🖲'), ('🕯', '🕯'), ('🖋', '🖋'), ('🗑', '🗑'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦀', '🦀'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏓', '🏓'), ('🏹', '🏹')], max_length=2, null=True, unique=True, verbose_name='emoji'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='name',
            field=models.CharField(help_text='The full name used on the homepage, e.g. "Australasian Intervarsity Debating Championships 2016"', max_length=100, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='seq',
            field=models.IntegerField(blank=True, help_text='A number that determines the relative order in which tournaments are displayed on the homepage.', null=True, verbose_name='sequence number'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='short_name',
            field=models.CharField(blank=True, default='', help_text='The name used in the menu, e.g. "Australs 2016"', max_length=25, verbose_name='short name'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='slug',
            field=models.SlugField(help_text='The sub-URL of the tournament, cannot have spaces, e.g. "australs2016"', unique=True, validators=[tournaments.models.validate_tournament_slug], verbose_name='slug'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='welcome_msg',
            field=models.TextField(blank=True, default='', help_text='Text/html entered here shows on the homepage for this tournament', null=True, verbose_name='welcome message'),
        ),
    ]
